version: '2.4'
services:

  jenkins:
    build: .
    image: esignbr/myjenkins
    container_name: myjenkins
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SONARQUBE_URL=http://sonarqube:9000
      - SLACK_WORKSPACE=esign-consulting
      - SLACK_TOKEN=ExiUpOiyEZnngKc45fEZOc8B
    ports:
      - 8080:8080
      - 8081:8081
    depends_on:
      - sonarqube

  sonarqube:
    image: sonarqube:9.8-community
    container_name: sonarqube
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=S3cr3t
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
    ports:
      - 9000:9000
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15.2-alpine3.17
    container_name: postgres
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=S3cr3t
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  jenkins_data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgresql:
  postgresql_data:
